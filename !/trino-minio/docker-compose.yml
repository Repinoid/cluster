services:
  trino-coordinator:
    image: 'trinodb/trino:latest'
    hostname: trino-coordinator
    container_name: trinoco
    ports:
      - '8080:8080'
    volumes:
      - ./etc:/etc/trino
    environment:
      - TRINO_NODE_ID=trino-coordinator
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/v1/info" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    depends_on:
      hive-metastore:
        condition: service_healthy
    networks:
      - localnet

  postgres:
    image: 'postgres:15'
    hostname: postgres
    container_name: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: metastore_db
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d metastore_db" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 40s
    networks:
      - localnet

  hive-metastore:
    image: 'hivewnetcat:latest'
    hostname: hive-metastore
    container_name: hive
    ports:
      - '9083:9083'
    volumes:
      - ./conf/metastore-site.xml:/opt/hive/conf/metastore-site.xml:ro
      - ./postgres/postgresql-jdbc.jar:/opt/hadoop-3.2.0/share/hadoop/common/lib/postgresql-jdbc.jar:ro
      - ./conf/hive-entrypoint.sh:/hive-entrypoint.sh:ro
    environment:
      DB_TYPE: postgres
    entrypoint: [ "/bin/sh", "/hive-entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "sh", "-c", "netstat -tln | grep :9083 || ss -tln | grep :9083 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - localnet

  minio:
    image: 'minio/minio:latest'
    hostname: minio
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: mpassword
      MINIO_SERVER_URL: http://minio:9000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 20s
      timeout: 10s
      retries: 8
      start_period: 30s
    command: server --console-address ":9001" /data
    networks:
      - localnet

  create-buckets:
    image: minio/mc:latest
    container_name: cr_tiny
    entrypoint: >
      /bin/sh -c " until mc alias set myminio http://minio:9000 minio mpassword; do
        echo 'Setting alias...'
        sleep 2
      done

      if mc ls myminio/tiny > /dev/null 2>&1; then
        echo 'Bucket tiny already exists'
      else
        mc mb myminio/tiny
        echo 'Bucket tiny created'
      fi

      if mc ls myminio/hive > /dev/null 2>&1; then
        echo 'Bucket hive already exists'
      else
        mc mb myminio/hive
        echo 'Bucket hive created'
      fi "
    depends_on:
      - minio
    networks:
      - localnet

volumes:
  minio-data:
    driver: local
  postgres_data:
    driver: local

networks:
  localnet:
    name: localnet
    driver: bridge
