services:
  debug-container:
      image: alpine:latest
      container_name: dbg
      command: /bin/sh -c "sleep infinity"  # чтобы контейнер не завершился
      stdin_open: true
      tty: true
      networks:
        - trino-network

  # MinIO для объектного хранилища
  minio-service:
    image: quay.io/minio/minio:latest
    container_name: minio-container
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: muser
      MINIO_ROOT_PASSWORD: mpassword
      TZ: Europe/Moscow
    command: server /data --console-address ":9001"
    healthcheck: # <-- Добавляем healthcheck для MinIO
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - trino-network
    volumes:
      - minio_data:/data

  # Автоматическое создание бакетов в MinIO
  createbuckets-service:
    image: quay.io/minio/mc:latest
    container_name: create-minio-buckets
    depends_on:
      - minio-service
    restart: on-failure
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set localminio http://minio-service:9000 muser mpassword;
      /usr/bin/mc mb localminio/tiny;
      /usr/bin/mc mb localminio/trinod;
      exit 0;
      "
    networks:
      - trino-network

  # PostgreSQL для Hive Metastore
  metastore-db:
    image: postgres:17
    container_name: metastore-db
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: hiveuser
      POSTGRES_PASSWORD: hivepassword
      TZ: Europe/Moscow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pg_logs:/var/log/postgresql
      - ./postgresql/pg_hba.conf:/etc/pg_hba.conf:ro
      - ./postgresql/postgresql.conf:/etc/postgresql.conf
    networks:
      - trino-network
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U hiveuser -d metastore"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    # Необязательно, но хороший тон: явно сообщаем, что сервис зависит от здоровья БД
    restart: unless-stopped      

  init-metastore:
    image: apache/hive:4.0.1
    # image: apache/hive:3.1.3
    container_name: init-metastore
    depends_on:  
      metastore-db:
        condition: service_healthy  # Ждем, пока БД не станет "healthy"    
    volumes:
      - ./metastore/metastore-site.xml:/opt/hive/conf/metastore-site.xml
      - ./jars/postgresql-42.7.8.jar:/opt/hive/lib/postgresql-42.7.8.jar
      - ./initm-entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/sh", "/entrypoint.sh"]  # ← ПОЛНОСТЬЮ СВОЙ ENTRYPOINT
    networks:
      - trino-network
    # restart: on-failure

  # Hive Metastore сервис
  metastore:
    # image: apache/hive:3.1.3
    image: apache/hive:4.0.1
    container_name: metastore
    environment:
      - HIVE_LOG4J2_PROPERTIES_FILE=/opt/hive/conf/hive-log4j2.properties
      - TZ=Europe/Moscow
    depends_on:
      init-metastore:
        condition: service_completed_successfully
      metastore-db:
        condition: service_healthy    
    volumes:
      - ./hive-home:/home/hive  # ← Монтируем директорию

      - ./metastore/metastore-site.xml:/opt/hive/conf/metastore-site.xml

      # hive-log4j2.properties параметры логирования
      - ./hive-log4j2.properties:/opt/hive/conf/hive-log4j2.properties

      - ./jars/postgresql-42.7.8.jar:/opt/hive/lib/postgresql-42.7.8.jar

      # If no aws-java-sdk-bundle-1.11.375.jar  - 
      # Query 20250919_120728_00000_e5s7j failed: metastore:9083: Socket is closed by peer.
      # - ./jars/aws-java-sdk-bundle-1.11.375.jar:/opt/hive/lib/aws-java-sdk-bundle-1.11.375.jar 
      # - ./jars/bundle-2.34.0.jar:/opt/hive/lib/bundle-2.34.0.jar 

      # jar tf ./jars/hadoop-aws-3.4.2.jar | grep S3AFileSystem
      - ./jars/hadoop-aws-3.4.2.jar:/opt/hive/lib/hadoop-aws-3.4.2.jar 

      - ./jars/hadoop-hdfs-client-3.4.2.jar:/opt/hive/lib/hadoop-hdfs-client-3.4.2.jar
      
      - ./metastore-entrypoint.sh:/metastore-entrypoint.sh

    entrypoint: ["/bin/sh", "/metastore-entrypoint.sh"]  # Свой entrypoint
    # healthcheck:
    #   test: ["CMD", "netstat", "-an", "|", "grep", "9083"]  # Check if Thrift port is listening
    #   interval: 5s
    #   timeout: 5s
    #   retries: 10
    #   start_period: 30s    
    networks:
      - trino-network

  # Trino coordinator
  trino-coordinator-service:
    image: trinodb/trino:latest
    container_name: trino-coordinator-container
    environment:
      - TZ=Europe/Moscow
    depends_on:
      metastore:
        condition: service_started 
      init-metastore:
        condition: service_completed_successfully        
      minio-service:
        condition: service_healthy 
    ports:
      - "8080:8080"
    volumes:
      - ./etc:/etc/trino
    networks:
      - trino-network  

volumes:
  minio_data:
  postgres_data:

networks:
  trino-network:
    driver: bridge
