services:
  # PostgreSQL для Hive Metastore
  postgres:
    image: postgres:13
    container_name: postgr
    hostname: postgres
    environment:
      POSTGRES_DB: metastore_db
      POSTGRES_USER: muser
      POSTGRES_PASSWORD: mpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hive-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hive -d metastore_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hadoop Namenode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    environment:
      - CLUSTER_NAME=hadoop-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - namenode_data:/hadoop/dfs/name
    ports:
      - "9870:9870"  # Namenode Web UI
      - "9000:9000"  # HDFS
    networks:
      - hive-network
    env_file:
      - ./hadoop.env

  # Hadoop Datanode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    hostname: datanode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - datanode_data:/hadoop/dfs/data
    ports:
      - "9864:9864"  # Datanode Web UI
    networks:
      - hive-network
    depends_on:
      - namenode
    env_file:
      - ./hadoop.env

  hive-metastore:
    image: apache/hive:4.0.0
    container_name: hive
    environment:
      - SKIP_SCHEMA_INIT=true  # Критически важно!
    ports:
      - "9083:9083"
    volumes:
      - ./postgresql-42.5.1.jar:/opt/hive/lib/postgresql.jar
      - ./hive-metastore-entrypoint.sh:/entrypoint.sh
      - ./jars/hadoop-aws-3.2.1.jar:/opt/hive/lib/hadoop-aws-3.2.1.jar
      - ./jars/aws-java-sdk-bundle-1.11.375.jar:/opt/hive/lib/aws-java-sdk-bundle-1.11.375.jar
      - ./core-site.xml:/opt/hadoop/conf/core-site.xml       
    entrypoint: ["/bin/sh", "/entrypoint.sh"]  
    networks:
      - hive-network
    depends_on:
      - postgres
      - namenode

  # Trino (замена HiveServer2)
  trino:
    image: trinodb/trino:latest
    container_name: trino
    hostname: trino
    ports:
      - "8080:8080"  # Trino Web UI
    volumes:
      - ./etc:/etc/trino
      - ./trino-data:/var/trino/data
      - ./trino-entrypoint.sh:/entrypoint.sh
      - warehouse_data:/opt/hive/data/warehouse
      - ./jars/hadoop-aws-3.2.1.jar:/usr/lib/trino/plugin/hive/hadoop-aws-3.2.1.jar
      - ./jars/aws-java-sdk-bundle-1.11.375.jar:/usr/lib/trino/plugin/hive/aws-java-sdk-bundle-1.11.375.jar      
    environment:
      - TRINO_NODE_ID=trino      
    entrypoint: ["/bin/bash", "/entrypoint.sh"]      
    networks:
      - hive-network
    depends_on:
      - hive-metastore
      - namenode

  minio:
    image: 'minio/minio:latest'
    hostname: minio
    container_name: minio
    ports:
      - '29000:9000'
      - '29001:9001'
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: muser
      MINIO_ROOT_PASSWORD: mpassword
      MINIO_SERVER_URL: http://minio:9000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 20s
      timeout: 10s
      retries: 8
      start_period: 30s
    command: server --console-address ":9001" /data
    networks:
      - hive-network

  create-buckets:
    image: minio/mc:latest
    container_name: cr_tiny
    entrypoint: >
      /bin/sh -c " until mc alias set myminio http://minio:9000 muser mpassword; do
        echo 'Setting alias...'
        sleep 2
      done

      if mc ls myminio/tiny > /dev/null 2>&1; then
        echo 'Bucket tiny already exists'
      else
        mc mb myminio/tiny
        echo 'Bucket tiny created'
      fi

      mc anonymous set public myminio/tiny

      if mc ls myminio/hive > /dev/null 2>&1; then
        echo 'Bucket hive already exists'
      else
        mc mb myminio/hive
        echo 'Bucket hive created'
      fi "
    depends_on:
      - minio
    networks:
      - hive-network


volumes:
  postgres_data:
    driver: local
  namenode_data:
    driver: local
  datanode_data:
    driver: local
  warehouse_data:
    driver: local
  minio-data:
    driver: local

networks:
  hive-network:
    driver: bridge
